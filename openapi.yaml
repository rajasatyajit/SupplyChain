openapi: 3.0.3
info:
  title: SupplyChain API
  version: 1.0.0
  description: Real-time supply chain disruption alerts
servers:
  - url: https://api.example.com
components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: APIKey
  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        timestamp: { type: string, format: date-time }
        request_id: { type: string }
    Alert:
      type: object
      properties:
        id: { type: string }
        source: { type: string }
        title: { type: string }
        summary: { type: string }
        url: { type: string, format: uri }
        detected_at: { type: string, format: date-time }
        published_at: { type: string, format: date-time }
        region: { type: string }
        country: { type: string }
        location: { type: string }
        latitude: { type: number, format: double }
        longitude: { type: number, format: double }
        disruption: { type: string }
        severity: { type: string, enum: [low, medium, high] }
        sentiment: { type: string, enum: [negative, neutral, positive] }
        confidence: { type: number, format: double }
    UsageSummary:
      type: object
      properties:
        account_id: { type: string }
        period_start: { type: string, format: date-time }
        period_end: { type: string, format: date-time }
        total: { type: integer }
        per_endpoint:
          type: object
          additionalProperties: { type: integer }
    TimeSeriesPoint:
      type: object
      properties:
        bucket: { type: string, format: date-time }
        requests: { type: integer }
    TimeSeriesResponse:
      type: object
      properties:
        bucket: { type: string, enum: [day, hour] }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
        data:
          type: array
          items: { $ref: '#/components/schemas/TimeSeriesPoint' }
    AdminAggregateItem:
      type: object
      properties:
        account_id: { type: string }
        api_key_id: { type: string }
        period_start: { type: string, format: date-time }
        period_end: { type: string, format: date-time }
        total_requests: { type: integer }
    AdminAggregatesResponse:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/AdminAggregateItem' }
        count: { type: integer }
        total: { type: integer }
        limit: { type: integer }
        offset: { type: integer }
        start: { type: string, format: date-time }
        end: { type: string, format: date-time }
paths:
  /v1/health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /v1/me:
    get:
      summary: Get plan and period for current API key
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Account info
  /v1/limits:
    get:
      summary: Get per-endpoint limits for current plan
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Limits
  /v1/usage:
    get:
      summary: Get current usage summary
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Usage summary
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UsageSummary' }
              examples:
                sample:
                  value:
                    account_id: acc_123
                    period_start: '2025-08-01T00:00:00Z'
                    period_end: '2025-09-01T00:00:00Z'
                    total: 1234
                    per_endpoint:
                      GET:/v1/alerts: 1200
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /v1/usage/timeseries:
    get:
      summary: Get usage time series for current account
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: bucket
          schema: { type: string, enum: [day, hour] }
        - in: query
          name: start
          schema: { type: string, format: date }
        - in: query
          name: end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Time series
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TimeSeriesResponse' }
              examples:
                sample:
                  value:
                    bucket: day
                    start: '2025-08-01T00:00:00Z'
                    end: '2025-09-01T00:00:00Z'
                    data:
                      - bucket: '2025-08-01T00:00:00Z'
                        requests: 100
                      - bucket: '2025-08-02T00:00:00Z'
                        requests: 120
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /v1/admin/usage:
    get:
      summary: Admin usage timeseries
      parameters:
        - in: query
          name: account_id
          schema: { type: string }
        - in: query
          name: bucket
          schema: { type: string, enum: [day, hour] }
        - in: query
          name: start
          schema: { type: string, format: date }
        - in: query
          name: end
          schema: { type: string, format: date }
      responses:
        '200':
          description: Admin usage timeseries
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TimeSeriesResponse' }
  /v1/admin/usage/aggregates:
    get:
      summary: Admin usage aggregates
      parameters:
        - in: query
          name: account_id
          schema: { type: string }
        - in: query
          name: api_key_id
          schema: { type: string }
        - in: query
          name: start
          schema: { type: string, format: date }
        - in: query
          name: end
          schema: { type: string, format: date }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 500 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
      responses:
        '200':
          description: Admin usage aggregates
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AdminAggregatesResponse' }
  /v1/billing/checkout-session:
    post:
      summary: Create Stripe Checkout session
      security:
        - ApiKeyAuth: []
      responses:
        '501': { description: Not Implemented }
  /v1/billing/portal-session:
    post:
      summary: Create Stripe Billing Portal session
      security:
        - ApiKeyAuth: []
      responses:
        '501': { description: Not Implemented }
  /v1/billing/webhook:
    post:
      summary: Stripe webhook receiver
      responses:
        '200': { description: OK }
  /v1/billing/razorpay/webhook:
    post:
      summary: Razorpay webhook receiver
      responses:
        '200': { description: OK }
  /v1/alerts:
    get:
      summary: List alerts
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: region
          schema: { type: string }
        - in: query
          name: country
          schema: { type: string }
        - in: query
          name: type
          schema: { type: string, description: Disruption type }
        - in: query
          name: severity
          schema: { type: string, enum: [low, medium, high] }
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 500 }
      responses:
        '200':
          description: Alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
                  count:
                    type: integer
        '429':
          description: Too Many Requests
          headers:
            Retry-After:
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

